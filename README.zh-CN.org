#+html: <p align="left">
#+html:	<a href="https://github.com/xhcoding/emacs-aichat/actions/workflows/test.yml"><img src="https://github.com/xhcoding/emacs-aichat/actions/workflows/test.yml/badge.svg"/></a>
#+html: </p>

* AI Chat in Emacs

在 Emacs 中使用 AI 聊天功能，目前包括 Bing Chat 和 OpenAI 的 ChatGpt 。

* 安装

** 依赖

- [[https://github.com/ahyatt/emacs-websocket][emacs-websocket]] 用来和 Bing Chat 通信，如果你已经安装的这个插件，请更新到最新版本
- [[https://github.com/kiennq/emacs-aio][emacs-aio]]
- [[https://github.com/jrblevin/markdown-mode][markdown-mode]]

** 安装

克隆仓库到本地，并将路径加入到 =load-path= 中：

#+begin_src sh
  git clone https://github.com/xhcoding/emacs-aichat.git ~/.emacs.d/site-lisp/emacs-aichat
#+end_src

#+begin_src elisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-aichat")
#+end_src

添加下面的代码到你的 emacs 启动文件中：

#+begin_src elisp
  (require 'aichat)
#+end_src

或者单独加载

#+begin_src elisp
  (require 'aichat-bingai)
  ;; or
  (require 'aichat-openai)
#+end_src

* Bing Chat

#+html: <p align="center"><img src="images/aichat-bingai-chat.png"/></p>

[[https://github.com/xhcoding/emacs-aichat/blob/main/images/examples.org][查看更多例子]]

下面是关于使用 Bing Chat 配置，如果你想要了解关于 OpenAI 的使用，请向下移动到 OpenAI 章节

** 设置

*** 检查能否使用 Bing Chat

- 安装最新版本的 Edge 浏览器
- 打开 http://bing.com/chat ，在国内需要代理，不然会被重定向到必应中国
- 如果能够使用聊天功能，说明可以使用 Bing Chat

*** 登录

emacs-aichat 获取浏览器的 cookie 登录 Bing Chat ，所以你需要先在浏览器登录 http://www.bing.com 。

有两种方式获取浏览器的 cookie ，你可以任选一种方便的方法。

**** 方式一

如果你有 Python 环境，运行 =pip3 install rookiepy= 安装 =rookiepy= ，
然后打开终端，执行下面的代码：

#+begin_src sh
  python -c "import rookiepy;list(map(lambda c: print('{} {} {} {} {} {}'.format(c['name'], c['value'], c['expires'], c['domain'], c['path'], c['secure'])), filter(lambda c: c['domain'] in ('.bing.com'), rookiepy.edge(['.bing.com']))))" 
#+end_src

如果你能够看到输出，并且输出中有 =_U= 字段，那么你能够用这种方式登录成功。

**** 方式二

- 安装 Edge 的 [[https://microsoftedge.microsoft.com/addons/detail/cookieeditor/neaplmfkghagebokkhpjpoebhdledlfi][Cookie Editor]] 扩展
- 打开 https://bing.com
- 打开 Cookie Editor
- 点击右下角的 "Export" ，成功后会把网站 cookie 保存到剪贴板
- 将剪贴板内容粘贴到 cookies.json 中
- 设置 =aichat-bingai-cookies-file= 的值为 cookies.json 文件的路径

*** 配置代理 [可选]

目前只测试过 http 代理，设置 =aichat-bingai-proxy= 为代理地址，比如：

#+begin_src elisp
  (setq aichat-bingai-proxy "localhost:51837")
#+end_src


*如果你的 IP 地址在中国，必须要设置代理才能访问*

** 使用

*** 命令

- =aichat-bingai-chat= :  发送对话消息，消息会保存在 =aichat-bingai-chat-file= 中，加上 =C-u= 前缀会重新开始一个对话
- =aichat-bingai-assistant= : 发送选中区域或者输入的内容，返回的结果显示在 =aichat-bingai-assistant-buffer= 定义的 Buffer 中
- =aichat-bingai-replace-or-insert= : 发送选中区域或者输入的内容，将返回的结果替代选中区域或者插入当前位置。

*** 自定义固定提问方式

使用 =aichat-bingai-prompt-create= 创建一个固定的提问方式，比如：

#+begin_src elisp
  (aichat-bingai-prompt-create "translator"
                               :input-prompt "请翻译: "
                               :text-format "请识别我说的语言，如果我说的语言是中文，请把它翻译成英文；如果我说的语言不是中文，请把它翻译成中文。你的返回内容必须是翻译后的文本，不能包括其它内容:\n%s"
                               :chat t
                               :assistant t
                               :replace-or-insert t)
#+end_src

上面这个配置会生成三个函数：  =aichat-bingai-chat-translator= , =aichat-bingai-assistant-translator= , =aichat-bingai-replace-or-insert-translator= ，效果和上面三个命令一样，只是提问的内容会按照 =text-format= 的格式。

*** 选项

- =aichat-bingai-cookies-file= : Bing cookies 文件路径
- =aichat-bingai-conversation-style= : 对话风格，可选项为：=creative= , =balanced= 或 =precise= ，默认为 =balanced=
- =aichat-bingai-chat-file= : 保存聊天记录的文件
- =aichat-bingai-chat-display-function= ：显示聊天文件的函数
- =aichat-bingai-assistant-buffer= : 显示 =aichat-bingai-assistant= 返回的内容的 Buffer 名称
- =aichat-bingai-assistant-display-function= : 显示 =aichat-bingai-assistant-buffer= 的方式，默认为 =display-buffer=

* OpenAI

#+html: <p align="center"><img src="images/aichat-openai-chat.png"/></p>

** 设置

*** 配置 AppKey

emacs-aichat 通过 =auth-source-pick-first-password= 获取 AppKey ，将你的 appkey 写入
=~/.authinfo= 文件里，格式如下：

#+begin_src conf
  machine platform.openai.com login aichat-openai password your-app-key
#+end_src

*** 配置代理 [可选]

目前只测试过 http 代理，设置 =aichat-openai-proxy= 为代理地址，比如：

#+begin_src elisp
  (setq aichat-openai-proxy "localhost:51837")
#+end_src

** 使用

*** 聊天模式

1. 用 =aichat-openai-chat= 创建一个新的聊天文件
2. 输入聊天内容
3. =aichat-openai-chat-send-buffer (C-c C-c)= 发送整个 buffer 的内容 ，
   或者用 =aichat-openai-chat-last-heading (C-c C-l)= 发送最后一个 User 内容

*** 助手模式

- =aichat-openai-assistant= : 发送选中区域或输入内容，将结果显示在 =aichat-openai-assistant-buffer= 中
- =aichat-openai-replace-or-insert= : 发送选中区域或者输入的内容，将返回的结果替代选中区域或者插入当前位置

*** 自定义固定提问方式

使用 =aichat-openai-prompt-create= 创建一个固定的提问方式，比如：

#+begin_src elisp
  (aichat-openai-prompt-create "translator"
                               :input-prompt "请翻译: "
                               :text-format "请识别我说的语言，如果我说的语言是中文，请把它翻译成英文；如果我说的语言不是中文，请把它翻译成中文。你的返回内容必须是翻译后的文本，不能包括其它内容:\n%s"
                               :assistant t
                               :replace-or-insert t)
#+end_src

上面这个配置会生成两个函数: =aichat-openai-assistant-translator= , =aichat-openai-replace-or-insert-translator= ，效果和上面两个命令一样，只是提问的内容会按照 =text-format= 的格式。


*** 选项

- =aichat-openai-proxy= : 设置请求 openai 的 http 代理
- =aichat-openai-assistant-buffer= : OpenAI 助手信息的 buffer 名
- =aichat-openai-assistant-display-function= ：显示 OpenAI 助手 Buffer 的函数
- =aichat-openai-chat-directory= : 存放聊天文件的目录
- =aichat-openai-chat-display-function= : 显示聊天 buffer 的函数


* 反馈问题

要反馈你的问题，请按照以下步骤操作：
1. 通过输入命令 =aichat-toggle-debug= 来打开调试模式。
2. 当出现错误时，[[https://github.com/xhcoding/emacs-aichat/issues/new][提交一个问题]] 并附上 =*AICHAT-DEBUG*= 缓冲区的内容。

* 感谢

- [[https://github.com/acheong08/EdgeGPT][EdgeGPT]]
- [[https://github.com/manateelazycat/mind-wave][mind-wave]]
- [[https://github.com/f/awesome-chatgpt-prompts][awesome-chatgpt-prompts]]
